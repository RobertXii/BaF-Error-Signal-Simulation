%% SimConfig.m
classdef SimConfig
    % Centralized simulation parameters
    properties
        W              % Weak matrix element [rad/s]
        d12            % Dipole matrix element|a>↔|b| [rad/(s·V/m)]
        d13            % Dipole matrix element|a>↔|c| [rad/(s·V/m)]
        gamma_c        % Decay rate of |c> [rad/s]
        E0_stark       % Stark field amplitude [V/m]
        E0_nr          % Non-reversing field amplitude [V/m]
        E0_L2          % L2 laser amplitude [V/m]
        omega_stark    % Stark frequency [rad/s]
        v              % Beam velocity [m/s]
        sigma_u        % NR field width [m]
        t_nr             % NR field center time [s]
        T_f1           % Free evolution before Stark [s]
        T_f2           % Free evolution after Stark [s]
        T_e            % Stark interaction duration [s]
        t_L2           % L2 pulse center time [s]
        sigma_L2       % L2 pulse width [s]
        tspan          % Time span [s]
        detuning_range % Detuning scan values [rad/s]
        detuning_L2    % L2 laser detuning [rad/s]
        fieldMethod    % Which total field profile to use
    end

    properties (Dependent)
        a               % = v^2/(2√2 σ_u^2)
        phi             % = T_e/2
        T_before_L2     % = T_e + T_f1 + T_f2
        K1              % = 2·d12·E0_stark/omega_stark
        K2              % = d12^2·E0_stark^2/omega_stark^2
        K3              % = d13^2·E0_L2^2·√π·σ_L2/4
        K4              % = d12·√(π/a)
        alpha        % = exp[(K3·(γ_c/2))/(δ_L2^2+(γ_c/2)^2)]
        beta         % = (K3·δ_L2)/(δ_L2^2+(γ_c/2)^2)
        T_all           % = T_before_L2 + t_diff
    end

    methods(Static)
        function cfg = default()
            cfg = SimConfig;
            cfg.W            = 0;
            cfg.d12          = -33.6 * 2*pi;
            cfg.d13          = -2.15e4 * 2*pi;
            cfg.gamma_c      = 2.7e6 * 2*pi;
            cfg.E0_stark     = 40;
            cfg.E0_nr        = 12;
            cfg.E0_L2        = 1204.1;
            cfg.omega_stark  = 2*pi*11.44e3;
            cfg.v            = 616;
            cfg.sigma_u      = 7.6e-3;
            cfg.t_nr         = 70.1e-6;
            cfg.t_L2         = 52.6e-6;
            cfg.T_f1         = 7.4e-6;
            cfg.T_f2         = 8.9e-6;
            cfg.T_e          = 87.4e-6;
            cfg.sigma_L2     = 0.373e-6;
            cfg.tspan        = linspace(-51.1e-6,200e-6,10000);
            cfg.detuning_range = linspace(-4000,4000,100) * 2*pi;
            cfg.detuning_L2  = 2*pi*1e6 * 2;
            cfg.fieldMethod  = 'default';
        end
    end

    methods
        function a = get.a(cfg)
            a = cfg.v^2/(2*sqrt(2)*cfg.sigma_u^2);
        end

        function phi = get.phi(cfg)
            phi = cfg.T_e/2;
        end

        function T_before_L2 = get.T_before_L2(cfg)
            T_before_L2 = cfg.T_e + cfg.T_f1 + cfg.T_f2;
        end

        function K1 = get.K1(cfg)
            K1 = 2*cfg.d12*cfg.E0_stark/cfg.omega_stark;
        end

        function K2 = get.K2(cfg)
            K2 = (cfg.d12^2 * cfg.E0_stark^2)/(cfg.omega_stark^2);
        end

        function K3 = get.K3(cfg)
            K3 = -(cfg.d13^2 * cfg.E0_L2^2 * sqrt(pi) * cfg.sigma_L2)/4;
        end

        function K4 = get.K4(cfg)
            K4 = cfg.d12 * sqrt(pi/cfg.a);
        end

        function alpha = get.alpha(cfg)
            alpha = exp((cfg.K3*(cfg.gamma_c/2)) / ...
                        (cfg.detuning_L2^2 + (cfg.gamma_c/2)^2));
        end

        function beta = get.beta(cfg)
            beta = (cfg.K3 * cfg.detuning_L2) / ...
                   (cfg.detuning_L2^2 + (cfg.gamma_c/2)^2);
        end

        function T_all = get.T_all(cfg)
            T_all = cfg.T_e + cfg.T_f1 + cfg.T_f2 + (cfg.t_nr - cfg.t_L2);
        end
    end
end
